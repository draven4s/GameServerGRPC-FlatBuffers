
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the FlatSharp FBS to C# compiler (source hash: 5.5.0.qGCK56Or4cjHMQrT7S9pgZfd5QhaW4De6igwjvsaEto=)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using FlatSharp;
using FlatSharp.Attributes;
#pragma warning disable 0618
#nullable enable annotations
namespace FlatSharp.Compiler.Generated
{
    internal static class CloneHelpers_dc8e43cf7cf841e08f5ac38fd02d5121
    {
        [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static GameServerGRPC.HelloRequest? Clone(GameServerGRPC.HelloRequest? item)
        {
            checked
            {
                return item is null ? null : new GameServerGRPC.HelloRequest(item);
            }
        }

        [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static System.String? Clone(System.String? item)
        {
            checked
            {
                return item;
            }
        }

        [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static GameServerGRPC.HelloReply? Clone(GameServerGRPC.HelloReply? item)
        {
            checked
            {
                return item is null ? null : new GameServerGRPC.HelloReply(item);
            }
        }

        [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static System.Boolean Clone(System.Boolean item)
        {
            checked
            {
                return item;
            }
        }

        [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static GameServerGRPC.Vector3? Clone(GameServerGRPC.Vector3? item)
        {
            checked
            {
                return item is null ? null : new GameServerGRPC.Vector3(item);
            }
        }

        [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static System.Single Clone(System.Single item)
        {
            checked
            {
                return item;
            }
        }

        [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static GameServerGRPC.MovementData? Clone(GameServerGRPC.MovementData? item)
        {
            checked
            {
                return item is null ? null : new GameServerGRPC.MovementData(item);
            }
        }

        [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static GameServerGRPC.MovementDataReply? Clone(GameServerGRPC.MovementDataReply? item)
        {
            checked
            {
                return item is null ? null : new GameServerGRPC.MovementDataReply(item);
            }
        }
    }

}

namespace GameServerGRPC
{
    [FlatBufferTableAttribute()]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class HelloRequest
        : object
        , IFlatBufferSerializable<HelloRequest>
    {
        public HelloRequest()
        {
            checked
            {
                this.name = null!;
                this.OnInitialized(null);
            }
        }

#pragma warning disable CS8618
        protected HelloRequest(FlatBufferDeserializationContext context)
        {
            checked
            {
            }
        }

#pragma warning restore CS8618
        public HelloRequest(HelloRequest source)
        {
            checked
            {
                this.name = FlatSharp.Compiler.Generated.CloneHelpers_dc8e43cf7cf841e08f5ac38fd02d5121.Clone(source.name);
                this.OnInitialized(null);
            }
        }

        partial void OnInitialized(FlatBufferDeserializationContext? context);

        protected void OnFlatSharpDeserialized(FlatBufferDeserializationContext? context) => this.OnInitialized(context);

        [FlatBufferItemAttribute(0)]
        public virtual System.String? name { get; set; }

        public static ISerializer<GameServerGRPC.HelloRequest> Serializer { get; } = new GeneratedSerializer().AsISerializer();

        ISerializer IFlatBufferSerializable.Serializer => Serializer;
        ISerializer<GameServerGRPC.HelloRequest> IFlatBufferSerializable<GameServerGRPC.HelloRequest>.Serializer => Serializer;

        #region Serializer for GameServerGRPC.HelloRequest

        [FlatSharpGeneratedSerializerAttribute(FlatBufferDeserializationOption.GreedyMutable)]
        private sealed class GeneratedSerializer : IGeneratedSerializer<GameServerGRPC.HelloRequest>
        {
            // Method generated to help AOT compilers make good decisions about generics.
            public void __AotHelper()
            {
                checked
                {
                    this.Write<ISpanWriter>(default!, new byte[10], default!, default!, default!);
                    this.Write<SpanWriter>(default!, new byte[10], default!, default!, default!);

                    this.Parse<IInputBuffer>(default!, 0);
                    this.Parse<MemoryInputBuffer.Wrapper>(default!, 0);
                    this.Parse<MemoryInputBuffer>(default!, 0);
                    this.Parse<ReadOnlyMemoryInputBuffer.Wrapper>(default!, 0);
                    this.Parse<ReadOnlyMemoryInputBuffer>(default!, 0);
                    this.Parse<ArrayInputBuffer.Wrapper>(default!, 0);
                    this.Parse<ArrayInputBuffer>(default!, 0);

#if FLATSHARP_UNSAFE
                        this.Parse<FlatSharp.Unsafe.UnsafeArrayInputBuffer>(default!, 0);
                        this.Parse<FlatSharp.Unsafe.UnsafeArrayInputBuffer.Wrapper>(default!, 0);
                        this.Parse<FlatSharp.Unsafe.UnsafeMemoryInputBuffer>(default!, 0);
                        this.Parse<FlatSharp.Unsafe.UnsafeMemoryInputBuffer.Wrapper>(default!, 0);
                        this.Write<FlatSharp.Unsafe.UnsafeSpanWriter>(default!, new byte[10], default!, default!, default!);
                        this.Write<FlatSharp.Unsafe.UnsafeSpanWriter.Wrapper>(default!, new byte[10], default!, default!, default!);
#endif

                    throw new InvalidOperationException("__AotHelper is not intended to be invoked");
                }
            }

            public void Write<TSpanWriter>(TSpanWriter writer, Span<byte> target, GameServerGRPC.HelloRequest root, int offset, SerializationContext context)
                where TSpanWriter : ISpanWriter
            {
                checked
                {
                    WriteInlineValueOf_a710631e09b64f76a757f7cde1cd6568(writer, target, root, offset, context);
                }
            }

            public int GetMaxSize(GameServerGRPC.HelloRequest root)
            {
                checked
                {
                    return GetMaxSizeOf_a710631e09b64f76a757f7cde1cd6568(root);
                }
            }

            public GameServerGRPC.HelloRequest Parse<TInputBuffer>(TInputBuffer buffer, int offset)
                where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return Read_a710631e09b64f76a757f7cde1cd6568(buffer, offset);
                }
            }

            private static int GetMaxSizeOf_a710631e09b64f76a757f7cde1cd6568(GameServerGRPC.HelloRequest value)
            {
                checked
                {

                    int runningSum = 14 + 7;
                    var index0Value = value.name;

                    if (!(index0Value is null))
                    {
                        runningSum += GetMaxSizeOf_c4ef757dfc1e41139bb7c0c5a65b76e3(index0Value);
                    }
                    return runningSum;

                }
            }

            private static GameServerGRPC.HelloRequest Read_a710631e09b64f76a757f7cde1cd6568<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return tableReader_c24ad6521ff34ae093146c8ee13569d2<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset));
                }
            }

            private sealed class tableReader_c24ad6521ff34ae093146c8ee13569d2<TInputBuffer>
                : GameServerGRPC.HelloRequest
                , FlatSharp.IFlatBufferDeserializedObject
                where TInputBuffer : IInputBuffer
            {
                private static readonly FlatSharp.FlatBufferDeserializationContext __CtorContext
                    = new FlatSharp.FlatBufferDeserializationContext(FlatSharp.FlatBufferDeserializationOption.GreedyMutable);



                private System.String? __index0Value;

                public static tableReader_c24ad6521ff34ae093146c8ee13569d2<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset)
                {
                    checked
                    {

                        var item = new tableReader_c24ad6521ff34ae093146c8ee13569d2<TInputBuffer>(buffer, offset);
                        return item;

                    }
                }

                private tableReader_c24ad6521ff34ae093146c8ee13569d2(TInputBuffer buffer, int offset) : base(__CtorContext)
                {
                    checked
                    {
                        buffer.InitializeVTable(offset, out var __vtableLocation, out var __vtableMaxIndex);
                        this.__index0Value = ReadIndex0Value(buffer, offset, __vtableLocation, __vtableMaxIndex);
                        base.OnFlatSharpDeserialized(__CtorContext);
                    }
                }

                System.Type IFlatBufferDeserializedObject.TableOrStructType => typeof(GameServerGRPC.HelloRequest);
                FlatSharp.FlatBufferDeserializationContext IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
                FlatSharp.IInputBuffer? IFlatBufferDeserializedObject.InputBuffer => null;



                public override System.String? name
                {
                    get
                    {
                        checked
                        {
                            return this.__index0Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index0Value = value;
                        }
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.String? ReadIndex0Value(
                    TInputBuffer buffer,
                    int offset,
                    int vtableOffset,
                    int maxVtableIndex)
                {
                    checked
                    {

                        if (0 > maxVtableIndex)
                        {
                            return null;
                        }

                        ushort relativeOffset = buffer.ReadUShort(vtableOffset + 4);
                        if (relativeOffset == 0)
                        {
                            return null;
                        }

                        int absoluteLocation = offset + relativeOffset;
                        return Read_c4ef757dfc1e41139bb7c0c5a65b76e3(buffer, absoluteLocation); ;
                    }
                }
            }



            private static void WriteInlineValueOf_a710631e09b64f76a757f7cde1cd6568<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                GameServerGRPC.HelloRequest value,
                int offset
                , SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int tableStart = context.AllocateSpace(11, sizeof(int));
                    spanWriter.WriteUOffset(span, offset, tableStart);
                    int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                    int vtableLength = 4;
                    Span<byte> vtable = stackalloc byte[6];

                    var index0Value = value.name;

                    var index0Offset = tableStart;
                    if (!(index0Value is null))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index0Offset = currentOffset;
                        currentOffset += 4;

                        vtableLength = 6;
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index0Offset - tableStart), 4);
                    int tableLength = currentOffset - tableStart;
                    context.Offset -= 11 - tableLength;
                    spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0);
                    spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort));
                    int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                    spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart);

                    if (index0Offset != tableStart)
                    {


                        WriteInlineValueOf_c4ef757dfc1e41139bb7c0c5a65b76e3(spanWriter, span, index0Value!, index0Offset, context);

                    }

                }
            }

            private static int GetMaxSizeOf_c4ef757dfc1e41139bb7c0c5a65b76e3(System.String value)
            {
                checked
                {
                    return SerializationHelpers.GetMaxSize(value);
                }
            }

            private static System.String Read_c4ef757dfc1e41139bb7c0c5a65b76e3<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadString(offset);
                }
            }

            private static void WriteInlineValueOf_c4ef757dfc1e41139bb7c0c5a65b76e3<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.String value,
                int offset
                , SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteString(span, value, offset, context);
                }
            }
        }

        #endregion
    }
    [FlatBufferTableAttribute()]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class HelloReply
        : object
        , IFlatBufferSerializable<HelloReply>
    {
        public HelloReply()
        {
            checked
            {
                this.message = null!;
                this.OnInitialized(null);
            }
        }

#pragma warning disable CS8618
        protected HelloReply(FlatBufferDeserializationContext context)
        {
            checked
            {
            }
        }

#pragma warning restore CS8618
        public HelloReply(HelloReply source)
        {
            checked
            {
                this.message = FlatSharp.Compiler.Generated.CloneHelpers_dc8e43cf7cf841e08f5ac38fd02d5121.Clone(source.message);
                this.success = FlatSharp.Compiler.Generated.CloneHelpers_dc8e43cf7cf841e08f5ac38fd02d5121.Clone(source.success);
                this.OnInitialized(null);
            }
        }

        partial void OnInitialized(FlatBufferDeserializationContext? context);

        protected void OnFlatSharpDeserialized(FlatBufferDeserializationContext? context) => this.OnInitialized(context);

        [FlatBufferItemAttribute(0)]
        public virtual System.String? message { get; set; }

        [FlatBufferItemAttribute(1)]
        public virtual System.Boolean success { get; set; }

        public static ISerializer<GameServerGRPC.HelloReply> Serializer { get; } = new GeneratedSerializer().AsISerializer();

        ISerializer IFlatBufferSerializable.Serializer => Serializer;
        ISerializer<GameServerGRPC.HelloReply> IFlatBufferSerializable<GameServerGRPC.HelloReply>.Serializer => Serializer;

        #region Serializer for GameServerGRPC.HelloReply

        [FlatSharpGeneratedSerializerAttribute(FlatBufferDeserializationOption.GreedyMutable)]
        private sealed class GeneratedSerializer : IGeneratedSerializer<GameServerGRPC.HelloReply>
        {
            // Method generated to help AOT compilers make good decisions about generics.
            public void __AotHelper()
            {
                checked
                {
                    this.Write<ISpanWriter>(default!, new byte[10], default!, default!, default!);
                    this.Write<SpanWriter>(default!, new byte[10], default!, default!, default!);

                    this.Parse<IInputBuffer>(default!, 0);
                    this.Parse<MemoryInputBuffer.Wrapper>(default!, 0);
                    this.Parse<MemoryInputBuffer>(default!, 0);
                    this.Parse<ReadOnlyMemoryInputBuffer.Wrapper>(default!, 0);
                    this.Parse<ReadOnlyMemoryInputBuffer>(default!, 0);
                    this.Parse<ArrayInputBuffer.Wrapper>(default!, 0);
                    this.Parse<ArrayInputBuffer>(default!, 0);

#if FLATSHARP_UNSAFE
                        this.Parse<FlatSharp.Unsafe.UnsafeArrayInputBuffer>(default!, 0);
                        this.Parse<FlatSharp.Unsafe.UnsafeArrayInputBuffer.Wrapper>(default!, 0);
                        this.Parse<FlatSharp.Unsafe.UnsafeMemoryInputBuffer>(default!, 0);
                        this.Parse<FlatSharp.Unsafe.UnsafeMemoryInputBuffer.Wrapper>(default!, 0);
                        this.Write<FlatSharp.Unsafe.UnsafeSpanWriter>(default!, new byte[10], default!, default!, default!);
                        this.Write<FlatSharp.Unsafe.UnsafeSpanWriter.Wrapper>(default!, new byte[10], default!, default!, default!);
#endif

                    throw new InvalidOperationException("__AotHelper is not intended to be invoked");
                }
            }

            public void Write<TSpanWriter>(TSpanWriter writer, Span<byte> target, GameServerGRPC.HelloReply root, int offset, SerializationContext context)
                where TSpanWriter : ISpanWriter
            {
                checked
                {
                    WriteInlineValueOf_d06cdbfca10a40e9b4589e68ced8e34a(writer, target, root, offset, context);
                }
            }

            public int GetMaxSize(GameServerGRPC.HelloReply root)
            {
                checked
                {
                    return GetMaxSizeOf_d06cdbfca10a40e9b4589e68ced8e34a(root);
                }
            }

            public GameServerGRPC.HelloReply Parse<TInputBuffer>(TInputBuffer buffer, int offset)
                where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return Read_d06cdbfca10a40e9b4589e68ced8e34a(buffer, offset);
                }
            }

            private static int GetMaxSizeOf_d06cdbfca10a40e9b4589e68ced8e34a(GameServerGRPC.HelloReply value)
            {
                checked
                {

                    int runningSum = 15 + 9;
                    var index0Value = value.message;

                    if (!(index0Value is null))
                    {
                        runningSum += GetMaxSizeOf_3090ff5f9aeb4c308adeed31d17d1c85(index0Value);
                    }
                    return runningSum;

                }
            }

            private static GameServerGRPC.HelloReply Read_d06cdbfca10a40e9b4589e68ced8e34a<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return tableReader_6d94439624f64112b1103e4f855b6ae5<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset));
                }
            }

            private sealed class tableReader_6d94439624f64112b1103e4f855b6ae5<TInputBuffer>
                : GameServerGRPC.HelloReply
                , FlatSharp.IFlatBufferDeserializedObject
                where TInputBuffer : IInputBuffer
            {
                private static readonly FlatSharp.FlatBufferDeserializationContext __CtorContext
                    = new FlatSharp.FlatBufferDeserializationContext(FlatSharp.FlatBufferDeserializationOption.GreedyMutable);



                private System.String? __index0Value;
                private System.Boolean __index1Value;

                public static tableReader_6d94439624f64112b1103e4f855b6ae5<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset)
                {
                    checked
                    {

                        var item = new tableReader_6d94439624f64112b1103e4f855b6ae5<TInputBuffer>(buffer, offset);
                        return item;

                    }
                }

                private tableReader_6d94439624f64112b1103e4f855b6ae5(TInputBuffer buffer, int offset) : base(__CtorContext)
                {
                    checked
                    {
                        buffer.InitializeVTable(offset, out var __vtableLocation, out var __vtableMaxIndex);
                        this.__index0Value = ReadIndex0Value(buffer, offset, __vtableLocation, __vtableMaxIndex);
                        this.__index1Value = ReadIndex1Value(buffer, offset, __vtableLocation, __vtableMaxIndex);
                        base.OnFlatSharpDeserialized(__CtorContext);
                    }
                }

                System.Type IFlatBufferDeserializedObject.TableOrStructType => typeof(GameServerGRPC.HelloReply);
                FlatSharp.FlatBufferDeserializationContext IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
                FlatSharp.IInputBuffer? IFlatBufferDeserializedObject.InputBuffer => null;



                public override System.String? message
                {
                    get
                    {
                        checked
                        {
                            return this.__index0Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index0Value = value;
                        }
                    }
                }

                public override System.Boolean success
                {
                    get
                    {
                        checked
                        {
                            return this.__index1Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index1Value = value;
                        }
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.String? ReadIndex0Value(
                    TInputBuffer buffer,
                    int offset,
                    int vtableOffset,
                    int maxVtableIndex)
                {
                    checked
                    {

                        if (0 > maxVtableIndex)
                        {
                            return null;
                        }

                        ushort relativeOffset = buffer.ReadUShort(vtableOffset + 4);
                        if (relativeOffset == 0)
                        {
                            return null;
                        }

                        int absoluteLocation = offset + relativeOffset;
                        return Read_3090ff5f9aeb4c308adeed31d17d1c85(buffer, absoluteLocation); ;
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.Boolean ReadIndex1Value(
                    TInputBuffer buffer,
                    int offset,
                    int vtableOffset,
                    int maxVtableIndex)
                {
                    checked
                    {

                        if (1 > maxVtableIndex)
                        {
                            return default(System.Boolean);
                        }

                        ushort relativeOffset = buffer.ReadUShort(vtableOffset + 6);
                        if (relativeOffset == 0)
                        {
                            return default(System.Boolean);
                        }

                        int absoluteLocation = offset + relativeOffset;
                        return Read_30a6c5629f5d4ff38a40772a359e1eaf(buffer, absoluteLocation); ;
                    }
                }
            }



            private static void WriteInlineValueOf_d06cdbfca10a40e9b4589e68ced8e34a<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                GameServerGRPC.HelloReply value,
                int offset
                , SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int tableStart = context.AllocateSpace(12, sizeof(int));
                    spanWriter.WriteUOffset(span, offset, tableStart);
                    int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                    int vtableLength = 4;
                    Span<byte> vtable = stackalloc byte[8];

                    var index0Value = value.message;
                    var index1Value = value.success;

                    var index0Offset = tableStart;
                    if (!(index0Value is null))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index0Offset = currentOffset;
                        currentOffset += 4;


                        if (6 > vtableLength)
                        {
                            vtableLength = 6;
                        }
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index0Offset - tableStart), 4);

                    var index1Offset = tableStart;
                    if (index1Value != default(System.Boolean))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 1);
                        index1Offset = currentOffset;
                        currentOffset += 1;


                        WriteInlineValueOf_30a6c5629f5d4ff38a40772a359e1eaf(spanWriter, span, index1Value, index1Offset);

                        vtableLength = 8;
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index1Offset - tableStart), 6);
                    int tableLength = currentOffset - tableStart;
                    context.Offset -= 12 - tableLength;
                    spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0);
                    spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort));
                    int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                    spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart);

                    if (index0Offset != tableStart)
                    {


                        WriteInlineValueOf_3090ff5f9aeb4c308adeed31d17d1c85(spanWriter, span, index0Value!, index0Offset, context);

                    }

                }
            }

            private static int GetMaxSizeOf_3090ff5f9aeb4c308adeed31d17d1c85(System.String value)
            {
                checked
                {
                    return SerializationHelpers.GetMaxSize(value);
                }
            }

            private static System.String Read_3090ff5f9aeb4c308adeed31d17d1c85<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadString(offset);
                }
            }

            private static void WriteInlineValueOf_3090ff5f9aeb4c308adeed31d17d1c85<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.String value,
                int offset
                , SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteString(span, value, offset, context);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static int GetMaxSizeOf_30a6c5629f5d4ff38a40772a359e1eaf(System.Boolean value)
            {
                checked
                {
                    return 1;
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Boolean Read_30a6c5629f5d4ff38a40772a359e1eaf<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadBool(offset);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static void WriteInlineValueOf_30a6c5629f5d4ff38a40772a359e1eaf<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.Boolean value,
                int offset
                ) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteBool(span, value, offset);
                }
            }
        }

        #endregion
    }
    [FlatBufferStructAttribute()]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class Vector3
        : object
    {
        public Vector3()
        {
            checked
            {
                this.OnInitialized(null);
            }
        }

#pragma warning disable CS8618
        protected Vector3(FlatBufferDeserializationContext context)
        {
            checked
            {
            }
        }

#pragma warning restore CS8618
        public Vector3(Vector3 source)
        {
            checked
            {
                this.x = FlatSharp.Compiler.Generated.CloneHelpers_dc8e43cf7cf841e08f5ac38fd02d5121.Clone(source.x);
                this.y = FlatSharp.Compiler.Generated.CloneHelpers_dc8e43cf7cf841e08f5ac38fd02d5121.Clone(source.y);
                this.z = FlatSharp.Compiler.Generated.CloneHelpers_dc8e43cf7cf841e08f5ac38fd02d5121.Clone(source.z);
                this.OnInitialized(null);
            }
        }

        partial void OnInitialized(FlatBufferDeserializationContext? context);

        protected void OnFlatSharpDeserialized(FlatBufferDeserializationContext? context) => this.OnInitialized(context);

        [FlatBufferItemAttribute(0)]
        public virtual System.Single x { get; set; }

        [FlatBufferItemAttribute(1)]
        public virtual System.Single y { get; set; }

        [FlatBufferItemAttribute(2)]
        public virtual System.Single z { get; set; }

    }
    [FlatBufferTableAttribute()]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class MovementData
        : object
        , IFlatBufferSerializable<MovementData>
    {
        public MovementData()
        {
            checked
            {
                this.name = null!;
                this.coords = null!;
                this.OnInitialized(null);
            }
        }

#pragma warning disable CS8618
        protected MovementData(FlatBufferDeserializationContext context)
        {
            checked
            {
            }
        }

#pragma warning restore CS8618
        public MovementData(MovementData source)
        {
            checked
            {
                this.name = FlatSharp.Compiler.Generated.CloneHelpers_dc8e43cf7cf841e08f5ac38fd02d5121.Clone(source.name);
                this.coords = FlatSharp.Compiler.Generated.CloneHelpers_dc8e43cf7cf841e08f5ac38fd02d5121.Clone(source.coords);
                this.OnInitialized(null);
            }
        }

        partial void OnInitialized(FlatBufferDeserializationContext? context);

        protected void OnFlatSharpDeserialized(FlatBufferDeserializationContext? context) => this.OnInitialized(context);

        [FlatBufferItemAttribute(0)]
        public virtual System.String? name { get; set; }

        [FlatBufferItemAttribute(1)]
        public virtual global::GameServerGRPC.Vector3? coords { get; set; }

        public static ISerializer<GameServerGRPC.MovementData> Serializer { get; } = new GeneratedSerializer().AsISerializer();

        ISerializer IFlatBufferSerializable.Serializer => Serializer;
        ISerializer<GameServerGRPC.MovementData> IFlatBufferSerializable<GameServerGRPC.MovementData>.Serializer => Serializer;

        #region Serializer for GameServerGRPC.MovementData

        [FlatSharpGeneratedSerializerAttribute(FlatBufferDeserializationOption.GreedyMutable)]
        private sealed class GeneratedSerializer : IGeneratedSerializer<GameServerGRPC.MovementData>
        {
            // Method generated to help AOT compilers make good decisions about generics.
            public void __AotHelper()
            {
                checked
                {
                    this.Write<ISpanWriter>(default!, new byte[10], default!, default!, default!);
                    this.Write<SpanWriter>(default!, new byte[10], default!, default!, default!);

                    this.Parse<IInputBuffer>(default!, 0);
                    this.Parse<MemoryInputBuffer.Wrapper>(default!, 0);
                    this.Parse<MemoryInputBuffer>(default!, 0);
                    this.Parse<ReadOnlyMemoryInputBuffer.Wrapper>(default!, 0);
                    this.Parse<ReadOnlyMemoryInputBuffer>(default!, 0);
                    this.Parse<ArrayInputBuffer.Wrapper>(default!, 0);
                    this.Parse<ArrayInputBuffer>(default!, 0);

#if FLATSHARP_UNSAFE
                        this.Parse<FlatSharp.Unsafe.UnsafeArrayInputBuffer>(default!, 0);
                        this.Parse<FlatSharp.Unsafe.UnsafeArrayInputBuffer.Wrapper>(default!, 0);
                        this.Parse<FlatSharp.Unsafe.UnsafeMemoryInputBuffer>(default!, 0);
                        this.Parse<FlatSharp.Unsafe.UnsafeMemoryInputBuffer.Wrapper>(default!, 0);
                        this.Write<FlatSharp.Unsafe.UnsafeSpanWriter>(default!, new byte[10], default!, default!, default!);
                        this.Write<FlatSharp.Unsafe.UnsafeSpanWriter.Wrapper>(default!, new byte[10], default!, default!, default!);
#endif

                    throw new InvalidOperationException("__AotHelper is not intended to be invoked");
                }
            }

            public void Write<TSpanWriter>(TSpanWriter writer, Span<byte> target, GameServerGRPC.MovementData root, int offset, SerializationContext context)
                where TSpanWriter : ISpanWriter
            {
                checked
                {
                    WriteInlineValueOf_34035758ce5948b180495614399ee191(writer, target, root, offset, context);
                }
            }

            public int GetMaxSize(GameServerGRPC.MovementData root)
            {
                checked
                {
                    return GetMaxSizeOf_34035758ce5948b180495614399ee191(root);
                }
            }

            public GameServerGRPC.MovementData Parse<TInputBuffer>(TInputBuffer buffer, int offset)
                where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return Read_34035758ce5948b180495614399ee191(buffer, offset);
                }
            }

            private static int GetMaxSizeOf_34035758ce5948b180495614399ee191(GameServerGRPC.MovementData value)
            {
                checked
                {

                    int runningSum = 29 + 9;
                    var index0Value = value.name;

                    if (!(index0Value is null))
                    {
                        runningSum += GetMaxSizeOf_2eacb54b3ddd43efba7332425d4538aa(index0Value);
                    }
                    return runningSum;

                }
            }

            private static GameServerGRPC.MovementData Read_34035758ce5948b180495614399ee191<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return tableReader_a1b7138b968e46e7ab9c485715d6bb5a<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset));
                }
            }

            private sealed class tableReader_a1b7138b968e46e7ab9c485715d6bb5a<TInputBuffer>
                : GameServerGRPC.MovementData
                , FlatSharp.IFlatBufferDeserializedObject
                where TInputBuffer : IInputBuffer
            {
                private static readonly FlatSharp.FlatBufferDeserializationContext __CtorContext
                    = new FlatSharp.FlatBufferDeserializationContext(FlatSharp.FlatBufferDeserializationOption.GreedyMutable);



                private System.String? __index0Value;
                private GameServerGRPC.Vector3? __index1Value;

                public static tableReader_a1b7138b968e46e7ab9c485715d6bb5a<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset)
                {
                    checked
                    {

                        var item = new tableReader_a1b7138b968e46e7ab9c485715d6bb5a<TInputBuffer>(buffer, offset);
                        return item;

                    }
                }

                private tableReader_a1b7138b968e46e7ab9c485715d6bb5a(TInputBuffer buffer, int offset) : base(__CtorContext)
                {
                    checked
                    {
                        buffer.InitializeVTable(offset, out var __vtableLocation, out var __vtableMaxIndex);
                        this.__index0Value = ReadIndex0Value(buffer, offset, __vtableLocation, __vtableMaxIndex);
                        this.__index1Value = ReadIndex1Value(buffer, offset, __vtableLocation, __vtableMaxIndex);
                        base.OnFlatSharpDeserialized(__CtorContext);
                    }
                }

                System.Type IFlatBufferDeserializedObject.TableOrStructType => typeof(GameServerGRPC.MovementData);
                FlatSharp.FlatBufferDeserializationContext IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
                FlatSharp.IInputBuffer? IFlatBufferDeserializedObject.InputBuffer => null;



                public override System.String? name
                {
                    get
                    {
                        checked
                        {
                            return this.__index0Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index0Value = value;
                        }
                    }
                }

                public override GameServerGRPC.Vector3? coords
                {
                    get
                    {
                        checked
                        {
                            return this.__index1Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index1Value = value;
                        }
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.String? ReadIndex0Value(
                    TInputBuffer buffer,
                    int offset,
                    int vtableOffset,
                    int maxVtableIndex)
                {
                    checked
                    {

                        if (0 > maxVtableIndex)
                        {
                            return null;
                        }

                        ushort relativeOffset = buffer.ReadUShort(vtableOffset + 4);
                        if (relativeOffset == 0)
                        {
                            return null;
                        }

                        int absoluteLocation = offset + relativeOffset;
                        return Read_2eacb54b3ddd43efba7332425d4538aa(buffer, absoluteLocation); ;
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static GameServerGRPC.Vector3? ReadIndex1Value(
                    TInputBuffer buffer,
                    int offset,
                    int vtableOffset,
                    int maxVtableIndex)
                {
                    checked
                    {

                        if (1 > maxVtableIndex)
                        {
                            return null;
                        }

                        ushort relativeOffset = buffer.ReadUShort(vtableOffset + 6);
                        if (relativeOffset == 0)
                        {
                            return null;
                        }

                        int absoluteLocation = offset + relativeOffset;
                        return Read_d8b61bb8b7a3473789785e1b469633c0(buffer, absoluteLocation); ;
                    }
                }
            }



            private static void WriteInlineValueOf_34035758ce5948b180495614399ee191<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                GameServerGRPC.MovementData value,
                int offset
                , SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int tableStart = context.AllocateSpace(26, sizeof(int));
                    spanWriter.WriteUOffset(span, offset, tableStart);
                    int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                    int vtableLength = 4;
                    Span<byte> vtable = stackalloc byte[8];

                    var index0Value = value.name;
                    var index1Value = value.coords;

                    var index0Offset = tableStart;
                    if (!(index0Value is null))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index0Offset = currentOffset;
                        currentOffset += 4;


                        if (6 > vtableLength)
                        {
                            vtableLength = 6;
                        }
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index0Offset - tableStart), 4);

                    var index1Offset = tableStart;
                    if (!(index1Value is null))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index1Offset = currentOffset;
                        currentOffset += 12;


                        WriteInlineValueOf_d8b61bb8b7a3473789785e1b469633c0(spanWriter, span, index1Value!, index1Offset);

                        vtableLength = 8;
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index1Offset - tableStart), 6);
                    int tableLength = currentOffset - tableStart;
                    context.Offset -= 26 - tableLength;
                    spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0);
                    spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort));
                    int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                    spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart);

                    if (index0Offset != tableStart)
                    {


                        WriteInlineValueOf_2eacb54b3ddd43efba7332425d4538aa(spanWriter, span, index0Value!, index0Offset, context);

                    }

                }
            }

            private static int GetMaxSizeOf_2eacb54b3ddd43efba7332425d4538aa(System.String value)
            {
                checked
                {
                    return SerializationHelpers.GetMaxSize(value);
                }
            }

            private static System.String Read_2eacb54b3ddd43efba7332425d4538aa<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadString(offset);
                }
            }

            private static void WriteInlineValueOf_2eacb54b3ddd43efba7332425d4538aa<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.String value,
                int offset
                , SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteString(span, value, offset, context);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static int GetMaxSizeOf_d8b61bb8b7a3473789785e1b469633c0(GameServerGRPC.Vector3 value)
            {
                checked
                {
                    return 15;
                }
            }

            private static GameServerGRPC.Vector3 Read_d8b61bb8b7a3473789785e1b469633c0<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return structReader_5902b4b0faa84d2495bf240cb07c5eb2<TInputBuffer>.GetOrCreate(buffer, offset);
                }
            }

            private sealed class structReader_5902b4b0faa84d2495bf240cb07c5eb2<TInputBuffer>
                : GameServerGRPC.Vector3
                , FlatSharp.IFlatBufferDeserializedObject
                where TInputBuffer : IInputBuffer
            {
                private static readonly FlatSharp.FlatBufferDeserializationContext __CtorContext
                    = new FlatSharp.FlatBufferDeserializationContext(FlatSharp.FlatBufferDeserializationOption.GreedyMutable);



                private System.Single __index0Value;
                private System.Single __index1Value;
                private System.Single __index2Value;

                public static structReader_5902b4b0faa84d2495bf240cb07c5eb2<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset)
                {
                    checked
                    {

                        var item = new structReader_5902b4b0faa84d2495bf240cb07c5eb2<TInputBuffer>(buffer, offset);
                        return item;

                    }
                }

                private structReader_5902b4b0faa84d2495bf240cb07c5eb2(TInputBuffer buffer, int offset) : base(__CtorContext)
                {
                    checked
                    {
                        this.__index0Value = ReadIndex0Value(buffer, offset, default, default);
                        this.__index1Value = ReadIndex1Value(buffer, offset, default, default);
                        this.__index2Value = ReadIndex2Value(buffer, offset, default, default);
                        base.OnFlatSharpDeserialized(__CtorContext);
                    }
                }

                System.Type IFlatBufferDeserializedObject.TableOrStructType => typeof(GameServerGRPC.Vector3);
                FlatSharp.FlatBufferDeserializationContext IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
                FlatSharp.IInputBuffer? IFlatBufferDeserializedObject.InputBuffer => null;



                public override System.Single x
                {
                    get
                    {
                        checked
                        {
                            return this.__index0Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index0Value = value;
                        }
                    }
                }

                public override System.Single y
                {
                    get
                    {
                        checked
                        {
                            return this.__index1Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index1Value = value;
                        }
                    }
                }

                public override System.Single z
                {
                    get
                    {
                        checked
                        {
                            return this.__index2Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index2Value = value;
                        }
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.Single ReadIndex0Value(
                    TInputBuffer buffer,
                    int offset,
                    int vtableOffset,
                    int maxVtableIndex)
                {
                    checked
                    {
                        return Read_42771bda07194738a135416eabc3cdfe(buffer, offset + 0); ;
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.Single ReadIndex1Value(
                    TInputBuffer buffer,
                    int offset,
                    int vtableOffset,
                    int maxVtableIndex)
                {
                    checked
                    {
                        return Read_42771bda07194738a135416eabc3cdfe(buffer, offset + 4); ;
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.Single ReadIndex2Value(
                    TInputBuffer buffer,
                    int offset,
                    int vtableOffset,
                    int maxVtableIndex)
                {
                    checked
                    {
                        return Read_42771bda07194738a135416eabc3cdfe(buffer, offset + 8); ;
                    }
                }
            }



            private static void WriteInlineValueOf_d8b61bb8b7a3473789785e1b469633c0<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                GameServerGRPC.Vector3 value,
                int offset
                ) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    Span<byte> scopedSpan = span.Slice(offset, 12);

                    if (value is null)
                    {
                        scopedSpan.Clear();
                        return;
                    }

                    WriteInlineValueOf_42771bda07194738a135416eabc3cdfe(spanWriter, scopedSpan, value.x, 0);
                    WriteInlineValueOf_42771bda07194738a135416eabc3cdfe(spanWriter, scopedSpan, value.y, 4);
                    WriteInlineValueOf_42771bda07194738a135416eabc3cdfe(spanWriter, scopedSpan, value.z, 8);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static int GetMaxSizeOf_42771bda07194738a135416eabc3cdfe(System.Single value)
            {
                checked
                {
                    return 7;
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Single Read_42771bda07194738a135416eabc3cdfe<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadFloat(offset);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static void WriteInlineValueOf_42771bda07194738a135416eabc3cdfe<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.Single value,
                int offset
                ) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteFloat(span, value, offset);
                }
            }
        }

        #endregion
    }
    [FlatBufferTableAttribute()]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class MovementDataReply
        : object
        , IFlatBufferSerializable<MovementDataReply>
    {
        public MovementDataReply()
        {
            checked
            {
                this.name = null!;
                this.coords = null!;
                this.OnInitialized(null);
            }
        }

#pragma warning disable CS8618
        protected MovementDataReply(FlatBufferDeserializationContext context)
        {
            checked
            {
            }
        }

#pragma warning restore CS8618
        public MovementDataReply(MovementDataReply source)
        {
            checked
            {
                this.name = FlatSharp.Compiler.Generated.CloneHelpers_dc8e43cf7cf841e08f5ac38fd02d5121.Clone(source.name);
                this.coords = FlatSharp.Compiler.Generated.CloneHelpers_dc8e43cf7cf841e08f5ac38fd02d5121.Clone(source.coords);
                this.OnInitialized(null);
            }
        }

        partial void OnInitialized(FlatBufferDeserializationContext? context);

        protected void OnFlatSharpDeserialized(FlatBufferDeserializationContext? context) => this.OnInitialized(context);

        [FlatBufferItemAttribute(0)]
        public virtual System.String? name { get; set; }

        [FlatBufferItemAttribute(1)]
        public virtual global::GameServerGRPC.Vector3? coords { get; set; }

        public static ISerializer<GameServerGRPC.MovementDataReply> Serializer { get; } = new GeneratedSerializer().AsISerializer();

        ISerializer IFlatBufferSerializable.Serializer => Serializer;
        ISerializer<GameServerGRPC.MovementDataReply> IFlatBufferSerializable<GameServerGRPC.MovementDataReply>.Serializer => Serializer;

        #region Serializer for GameServerGRPC.MovementDataReply

        [FlatSharpGeneratedSerializerAttribute(FlatBufferDeserializationOption.GreedyMutable)]
        private sealed class GeneratedSerializer : IGeneratedSerializer<GameServerGRPC.MovementDataReply>
        {
            // Method generated to help AOT compilers make good decisions about generics.
            public void __AotHelper()
            {
                checked
                {
                    this.Write<ISpanWriter>(default!, new byte[10], default!, default!, default!);
                    this.Write<SpanWriter>(default!, new byte[10], default!, default!, default!);

                    this.Parse<IInputBuffer>(default!, 0);
                    this.Parse<MemoryInputBuffer.Wrapper>(default!, 0);
                    this.Parse<MemoryInputBuffer>(default!, 0);
                    this.Parse<ReadOnlyMemoryInputBuffer.Wrapper>(default!, 0);
                    this.Parse<ReadOnlyMemoryInputBuffer>(default!, 0);
                    this.Parse<ArrayInputBuffer.Wrapper>(default!, 0);
                    this.Parse<ArrayInputBuffer>(default!, 0);

#if FLATSHARP_UNSAFE
                        this.Parse<FlatSharp.Unsafe.UnsafeArrayInputBuffer>(default!, 0);
                        this.Parse<FlatSharp.Unsafe.UnsafeArrayInputBuffer.Wrapper>(default!, 0);
                        this.Parse<FlatSharp.Unsafe.UnsafeMemoryInputBuffer>(default!, 0);
                        this.Parse<FlatSharp.Unsafe.UnsafeMemoryInputBuffer.Wrapper>(default!, 0);
                        this.Write<FlatSharp.Unsafe.UnsafeSpanWriter>(default!, new byte[10], default!, default!, default!);
                        this.Write<FlatSharp.Unsafe.UnsafeSpanWriter.Wrapper>(default!, new byte[10], default!, default!, default!);
#endif

                    throw new InvalidOperationException("__AotHelper is not intended to be invoked");
                }
            }

            public void Write<TSpanWriter>(TSpanWriter writer, Span<byte> target, GameServerGRPC.MovementDataReply root, int offset, SerializationContext context)
                where TSpanWriter : ISpanWriter
            {
                checked
                {
                    WriteInlineValueOf_d358795f797d46c89dd7e56109b53aea(writer, target, root, offset, context);
                }
            }

            public int GetMaxSize(GameServerGRPC.MovementDataReply root)
            {
                checked
                {
                    return GetMaxSizeOf_d358795f797d46c89dd7e56109b53aea(root);
                }
            }

            public GameServerGRPC.MovementDataReply Parse<TInputBuffer>(TInputBuffer buffer, int offset)
                where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return Read_d358795f797d46c89dd7e56109b53aea(buffer, offset);
                }
            }

            private static int GetMaxSizeOf_d358795f797d46c89dd7e56109b53aea(GameServerGRPC.MovementDataReply value)
            {
                checked
                {

                    int runningSum = 29 + 9;
                    var index0Value = value.name;

                    if (!(index0Value is null))
                    {
                        runningSum += GetMaxSizeOf_15766066481544fe8cb8b822fb232f70(index0Value);
                    }
                    return runningSum;

                }
            }

            private static GameServerGRPC.MovementDataReply Read_d358795f797d46c89dd7e56109b53aea<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return tableReader_f9b91b5e8771442595ed68b59bcae744<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset));
                }
            }

            private sealed class tableReader_f9b91b5e8771442595ed68b59bcae744<TInputBuffer>
                : GameServerGRPC.MovementDataReply
                , FlatSharp.IFlatBufferDeserializedObject
                where TInputBuffer : IInputBuffer
            {
                private static readonly FlatSharp.FlatBufferDeserializationContext __CtorContext
                    = new FlatSharp.FlatBufferDeserializationContext(FlatSharp.FlatBufferDeserializationOption.GreedyMutable);



                private System.String? __index0Value;
                private GameServerGRPC.Vector3? __index1Value;

                public static tableReader_f9b91b5e8771442595ed68b59bcae744<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset)
                {
                    checked
                    {

                        var item = new tableReader_f9b91b5e8771442595ed68b59bcae744<TInputBuffer>(buffer, offset);
                        return item;

                    }
                }

                private tableReader_f9b91b5e8771442595ed68b59bcae744(TInputBuffer buffer, int offset) : base(__CtorContext)
                {
                    checked
                    {
                        buffer.InitializeVTable(offset, out var __vtableLocation, out var __vtableMaxIndex);
                        this.__index0Value = ReadIndex0Value(buffer, offset, __vtableLocation, __vtableMaxIndex);
                        this.__index1Value = ReadIndex1Value(buffer, offset, __vtableLocation, __vtableMaxIndex);
                        base.OnFlatSharpDeserialized(__CtorContext);
                    }
                }

                System.Type IFlatBufferDeserializedObject.TableOrStructType => typeof(GameServerGRPC.MovementDataReply);
                FlatSharp.FlatBufferDeserializationContext IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
                FlatSharp.IInputBuffer? IFlatBufferDeserializedObject.InputBuffer => null;



                public override System.String? name
                {
                    get
                    {
                        checked
                        {
                            return this.__index0Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index0Value = value;
                        }
                    }
                }

                public override GameServerGRPC.Vector3? coords
                {
                    get
                    {
                        checked
                        {
                            return this.__index1Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index1Value = value;
                        }
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.String? ReadIndex0Value(
                    TInputBuffer buffer,
                    int offset,
                    int vtableOffset,
                    int maxVtableIndex)
                {
                    checked
                    {

                        if (0 > maxVtableIndex)
                        {
                            return null;
                        }

                        ushort relativeOffset = buffer.ReadUShort(vtableOffset + 4);
                        if (relativeOffset == 0)
                        {
                            return null;
                        }

                        int absoluteLocation = offset + relativeOffset;
                        return Read_15766066481544fe8cb8b822fb232f70(buffer, absoluteLocation); ;
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static GameServerGRPC.Vector3? ReadIndex1Value(
                    TInputBuffer buffer,
                    int offset,
                    int vtableOffset,
                    int maxVtableIndex)
                {
                    checked
                    {

                        if (1 > maxVtableIndex)
                        {
                            return null;
                        }

                        ushort relativeOffset = buffer.ReadUShort(vtableOffset + 6);
                        if (relativeOffset == 0)
                        {
                            return null;
                        }

                        int absoluteLocation = offset + relativeOffset;
                        return Read_47de8ab78e9d424c9a083d223db26abe(buffer, absoluteLocation); ;
                    }
                }
            }



            private static void WriteInlineValueOf_d358795f797d46c89dd7e56109b53aea<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                GameServerGRPC.MovementDataReply value,
                int offset
                , SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {

                    int tableStart = context.AllocateSpace(26, sizeof(int));
                    spanWriter.WriteUOffset(span, offset, tableStart);
                    int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                    int vtableLength = 4;
                    Span<byte> vtable = stackalloc byte[8];

                    var index0Value = value.name;
                    var index1Value = value.coords;

                    var index0Offset = tableStart;
                    if (!(index0Value is null))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index0Offset = currentOffset;
                        currentOffset += 4;


                        if (6 > vtableLength)
                        {
                            vtableLength = 6;
                        }
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index0Offset - tableStart), 4);

                    var index1Offset = tableStart;
                    if (!(index1Value is null))
                    {

                        currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                        index1Offset = currentOffset;
                        currentOffset += 12;


                        WriteInlineValueOf_47de8ab78e9d424c9a083d223db26abe(spanWriter, span, index1Value!, index1Offset);

                        vtableLength = 8;
                    }

                    spanWriter.WriteUShort(vtable, (ushort)(index1Offset - tableStart), 6);
                    int tableLength = currentOffset - tableStart;
                    context.Offset -= 26 - tableLength;
                    spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0);
                    spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort));
                    int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                    spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart);

                    if (index0Offset != tableStart)
                    {


                        WriteInlineValueOf_15766066481544fe8cb8b822fb232f70(spanWriter, span, index0Value!, index0Offset, context);

                    }

                }
            }

            private static int GetMaxSizeOf_15766066481544fe8cb8b822fb232f70(System.String value)
            {
                checked
                {
                    return SerializationHelpers.GetMaxSize(value);
                }
            }

            private static System.String Read_15766066481544fe8cb8b822fb232f70<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadString(offset);
                }
            }

            private static void WriteInlineValueOf_15766066481544fe8cb8b822fb232f70<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.String value,
                int offset
                , SerializationContext context) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteString(span, value, offset, context);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static int GetMaxSizeOf_47de8ab78e9d424c9a083d223db26abe(GameServerGRPC.Vector3 value)
            {
                checked
                {
                    return 15;
                }
            }

            private static GameServerGRPC.Vector3 Read_47de8ab78e9d424c9a083d223db26abe<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return structReader_65a098c04e8a4615a134504232abe1d8<TInputBuffer>.GetOrCreate(buffer, offset);
                }
            }

            private sealed class structReader_65a098c04e8a4615a134504232abe1d8<TInputBuffer>
                : GameServerGRPC.Vector3
                , FlatSharp.IFlatBufferDeserializedObject
                where TInputBuffer : IInputBuffer
            {
                private static readonly FlatSharp.FlatBufferDeserializationContext __CtorContext
                    = new FlatSharp.FlatBufferDeserializationContext(FlatSharp.FlatBufferDeserializationOption.GreedyMutable);



                private System.Single __index0Value;
                private System.Single __index1Value;
                private System.Single __index2Value;

                public static structReader_65a098c04e8a4615a134504232abe1d8<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset)
                {
                    checked
                    {

                        var item = new structReader_65a098c04e8a4615a134504232abe1d8<TInputBuffer>(buffer, offset);
                        return item;

                    }
                }

                private structReader_65a098c04e8a4615a134504232abe1d8(TInputBuffer buffer, int offset) : base(__CtorContext)
                {
                    checked
                    {
                        this.__index0Value = ReadIndex0Value(buffer, offset, default, default);
                        this.__index1Value = ReadIndex1Value(buffer, offset, default, default);
                        this.__index2Value = ReadIndex2Value(buffer, offset, default, default);
                        base.OnFlatSharpDeserialized(__CtorContext);
                    }
                }

                System.Type IFlatBufferDeserializedObject.TableOrStructType => typeof(GameServerGRPC.Vector3);
                FlatSharp.FlatBufferDeserializationContext IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
                FlatSharp.IInputBuffer? IFlatBufferDeserializedObject.InputBuffer => null;



                public override System.Single x
                {
                    get
                    {
                        checked
                        {
                            return this.__index0Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index0Value = value;
                        }
                    }
                }

                public override System.Single y
                {
                    get
                    {
                        checked
                        {
                            return this.__index1Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index1Value = value;
                        }
                    }
                }

                public override System.Single z
                {
                    get
                    {
                        checked
                        {
                            return this.__index2Value;
                        }
                    }

                    set
                    {
                        checked
                        {
                            this.__index2Value = value;
                        }
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.Single ReadIndex0Value(
                    TInputBuffer buffer,
                    int offset,
                    int vtableOffset,
                    int maxVtableIndex)
                {
                    checked
                    {
                        return Read_85ad7b33446e4b9ca7c3d5868082d8d4(buffer, offset + 0); ;
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.Single ReadIndex1Value(
                    TInputBuffer buffer,
                    int offset,
                    int vtableOffset,
                    int maxVtableIndex)
                {
                    checked
                    {
                        return Read_85ad7b33446e4b9ca7c3d5868082d8d4(buffer, offset + 4); ;
                    }
                }

                [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
                private static System.Single ReadIndex2Value(
                    TInputBuffer buffer,
                    int offset,
                    int vtableOffset,
                    int maxVtableIndex)
                {
                    checked
                    {
                        return Read_85ad7b33446e4b9ca7c3d5868082d8d4(buffer, offset + 8); ;
                    }
                }
            }



            private static void WriteInlineValueOf_47de8ab78e9d424c9a083d223db26abe<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                GameServerGRPC.Vector3 value,
                int offset
                ) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    Span<byte> scopedSpan = span.Slice(offset, 12);

                    if (value is null)
                    {
                        scopedSpan.Clear();
                        return;
                    }

                    WriteInlineValueOf_85ad7b33446e4b9ca7c3d5868082d8d4(spanWriter, scopedSpan, value.x, 0);
                    WriteInlineValueOf_85ad7b33446e4b9ca7c3d5868082d8d4(spanWriter, scopedSpan, value.y, 4);
                    WriteInlineValueOf_85ad7b33446e4b9ca7c3d5868082d8d4(spanWriter, scopedSpan, value.z, 8);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static int GetMaxSizeOf_85ad7b33446e4b9ca7c3d5868082d8d4(System.Single value)
            {
                checked
                {
                    return 7;
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Single Read_85ad7b33446e4b9ca7c3d5868082d8d4<TInputBuffer>(
                TInputBuffer buffer,
                int offset) where TInputBuffer : IInputBuffer
            {
                checked
                {
                    return buffer.ReadFloat(offset);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static void WriteInlineValueOf_85ad7b33446e4b9ca7c3d5868082d8d4<TSpanWriter>(
                TSpanWriter spanWriter,
                Span<byte> span,
                System.Single value,
                int offset
                ) where TSpanWriter : ISpanWriter
            {
                checked
                {
                    spanWriter.WriteFloat(span, value, offset);
                }
            }
        }

        #endregion
    }
    public static partial class Greeter
    {

        private static Grpc.Core.Marshaller<T> CreateMarshaller<T>(ISerializer<T> serializer) where T : class
        {
            checked
            {
                return Grpc.Core.Marshallers.Create<T>(
                    (item, sc) =>
                    {
                        var bufferWriter = sc.GetBufferWriter();
                        var span = bufferWriter.GetSpan(serializer.GetMaxSize(item));
                        int bytesWritten = serializer.Write(SpanWriter.Instance, span, item);
                        bufferWriter.Advance(bytesWritten);
                        sc.Complete();
                    },
                    dc => serializer.Parse(new ArrayInputBuffer(dc.PayloadAsNewBuffer())));
            }
        }

        private static readonly Grpc.Core.Marshaller<HelloRequest> __Marshaller_09c373ac0fa0411084ab8b57dc7e8bec = CreateMarshaller(HelloRequest.Serializer);
        private static readonly Grpc.Core.Marshaller<HelloReply> __Marshaller_361b6ec9ec43427f8ccf0d2d4814fb37 = CreateMarshaller(HelloReply.Serializer);
        private static readonly Grpc.Core.Marshaller<MovementData> __Marshaller_71718d931d7146aeaaf2035f7ba14828 = CreateMarshaller(MovementData.Serializer);
        private static readonly Grpc.Core.Marshaller<MovementDataReply> __Marshaller_242e383716a4405e88906c1b5203e776 = CreateMarshaller(MovementDataReply.Serializer);
        private static readonly Grpc.Core.Method<HelloRequest, HelloReply> __Method_778242c5b8ae4062845e42e3beadd5b9 = new Grpc.Core.Method<HelloRequest, HelloReply>(
            Grpc.Core.MethodType.Unary,
            "GameServerGRPC.Greeter",
            "SayHello",
            __Marshaller_09c373ac0fa0411084ab8b57dc7e8bec,
            __Marshaller_361b6ec9ec43427f8ccf0d2d4814fb37);
        private static readonly Grpc.Core.Method<MovementData, MovementDataReply> __Method_be368b8eac1b4dd199968d2e57d31775 = new Grpc.Core.Method<MovementData, MovementDataReply>(
            Grpc.Core.MethodType.ServerStreaming,
            "GameServerGRPC.Greeter",
            "SyncMovement",
            __Marshaller_71718d931d7146aeaaf2035f7ba14828,
            __Marshaller_242e383716a4405e88906c1b5203e776);
        private static readonly Grpc.Core.Method<MovementData, MovementDataReply> __Method_6eedb4ce4f044c5e894c1967dcf96868 = new Grpc.Core.Method<MovementData, MovementDataReply>(
            Grpc.Core.MethodType.Unary,
            "GameServerGRPC.Greeter",
            "Move",
            __Marshaller_71718d931d7146aeaaf2035f7ba14828,
            __Marshaller_242e383716a4405e88906c1b5203e776);
        [Grpc.Core.BindServiceMethod(typeof(Greeter), "BindService")]
        public abstract partial class GreeterServerBase
        {
            public abstract System.Threading.Tasks.Task<HelloReply> SayHello(HelloRequest request, Grpc.Core.ServerCallContext callContext);
            public abstract System.Threading.Tasks.Task SyncMovement(MovementData request, Grpc.Core.IServerStreamWriter<MovementDataReply> responseStream, Grpc.Core.ServerCallContext callContext);
            public abstract System.Threading.Tasks.Task<MovementDataReply> Move(MovementData request, Grpc.Core.ServerCallContext callContext);
        }

        public static Grpc.Core.ServerServiceDefinition BindService(GreeterServerBase serviceImpl)
        {
            checked
            {
                return Grpc.Core.ServerServiceDefinition.CreateBuilder()
                    .AddMethod(__Method_778242c5b8ae4062845e42e3beadd5b9, serviceImpl.SayHello)
                    .AddMethod(__Method_be368b8eac1b4dd199968d2e57d31775, serviceImpl.SyncMovement)
                    .AddMethod(__Method_6eedb4ce4f044c5e894c1967dcf96868, serviceImpl.Move)
                    .Build();
            }
        }

        public static void BindService(Grpc.Core.ServiceBinderBase serviceBinder, GreeterServerBase serviceImpl)
        {
            checked
            {
                serviceBinder.AddMethod(__Method_778242c5b8ae4062845e42e3beadd5b9,
                    serviceImpl == null
                        ? null
                        : new Grpc.Core.UnaryServerMethod<HelloRequest, HelloReply>(serviceImpl.SayHello));
                serviceBinder.AddMethod(__Method_be368b8eac1b4dd199968d2e57d31775,
                    serviceImpl == null
                        ? null
                        : new Grpc.Core.ServerStreamingServerMethod<MovementData, MovementDataReply>(serviceImpl.SyncMovement));
                serviceBinder.AddMethod(__Method_6eedb4ce4f044c5e894c1967dcf96868,
                    serviceImpl == null
                        ? null
                        : new Grpc.Core.UnaryServerMethod<MovementData, MovementDataReply>(serviceImpl.Move));
            }
        }

        public partial class GreeterClient : Grpc.Core.ClientBase<GreeterClient>
        {
            public GreeterClient(Grpc.Core.ChannelBase channel) : base(channel)
            {
                checked
                { }
            }

            public GreeterClient(Grpc.Core.CallInvoker callInvoker) : base(callInvoker)
            {
                checked
                { }
            }

            protected GreeterClient() : base()
            {
                checked
                { }
            }

            protected GreeterClient(ClientBaseConfiguration configuration) : base(configuration)
            {
                checked
                { }
            }

            protected override GreeterClient NewInstance(ClientBaseConfiguration configuration)
            {
                checked
                {
                    return new GreeterClient(configuration);
                }
            }

            public virtual Grpc.Core.AsyncUnaryCall<HelloReply> SayHello(HelloRequest request, Grpc.Core.Metadata? headers = null, System.DateTime? deadline = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                checked
                {
                    return SayHello(request, new Grpc.Core.CallOptions(headers, deadline, cancellationToken));
                }
            }

            public virtual Grpc.Core.AsyncUnaryCall<HelloReply> SayHello(HelloRequest request, Grpc.Core.CallOptions options)
            {
                checked
                {
                    return CallInvoker.AsyncUnaryCall(__Method_778242c5b8ae4062845e42e3beadd5b9, null, options, request);
                }
            }

            public virtual Grpc.Core.AsyncServerStreamingCall<MovementDataReply> SyncMovement(MovementData request, Grpc.Core.Metadata? headers = null, System.DateTime? deadline = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                checked
                {
                    return SyncMovement(request, new Grpc.Core.CallOptions(headers, deadline, cancellationToken));
                }
            }

            public virtual Grpc.Core.AsyncServerStreamingCall<MovementDataReply> SyncMovement(MovementData request, Grpc.Core.CallOptions options)
            {
                checked
                {
                    return CallInvoker.AsyncServerStreamingCall(__Method_be368b8eac1b4dd199968d2e57d31775, null, options, request);
                }
            }

            public virtual Grpc.Core.AsyncUnaryCall<MovementDataReply> Move(MovementData request, Grpc.Core.Metadata? headers = null, System.DateTime? deadline = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                checked
                {
                    return Move(request, new Grpc.Core.CallOptions(headers, deadline, cancellationToken));
                }
            }

            public virtual Grpc.Core.AsyncUnaryCall<MovementDataReply> Move(MovementData request, Grpc.Core.CallOptions options)
            {
                checked
                {
                    return CallInvoker.AsyncUnaryCall(__Method_6eedb4ce4f044c5e894c1967dcf96868, null, options, request);
                }
            }
        }

    }

}
#nullable restore
#pragma warning restore 0618
